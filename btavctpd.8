.Dd August 06, 2023
.Dt BTAVCTPD 8
.Os
.Sh NAME
.Nm btavctpd
.Nd Media control for Bluetooth devices
.Sh SYNOPSIS
.Nm
.Op Fl d
.Op Fl p
.Fl h Ar bthostname
.Sh DESCRIPTION
The
.Nm
daemon can be used to allow local media players to be controlled
via the control buttons found on Bluetooth devices such as headsets
and speakers.
.Pp
It can control players either via libplayerctl (available in
.Em multimedia/playerctl )
or otherwise using xdotool.
If using
.Xr xdotool 1 ,
.Nm
will emit key press events for the X11 keys
.Dv XF86AudioPlay ,
.Dv XF86AudioPause ,
.Dv XF86AudioNext
and
.Dv XF86AudioPrev .
In the latter case the daemon must be launched from within an X11 session.
.Sh OPTIONS
.Bl -tag -width indent
.It Fl d , -no-daemon
Do not daemonise and don't detach from the controlling terminal.
.It Fl p
Use libplayerctl to control the local media player.
.It Fl h , -hostname Ar bthostname
Connect to the given Bluetooth address or hostname.
.El
.Sh FILES
.Bl -tag -width indent
.It Pa /etc/bluetooth/hosts
List of Bluetooth hostnames and their addresses
.El
.Sh EXAMPLES
Run in the background and connect to a device called
.Dq headphones
listed in
.Pa /etc/bluetooth/hosts
using playerctl to control the media players:
.Bd -literal -width indent
$ btavctpd -p -h headphones
.Ed
.Sh DIAGNOSTICS
Errors are logged to syslogd and unless the
.Fl d
flag is set also to stderr.
Syslog output should end up in
.Pa /var/log/daemon.log .
.Sh SEE ALSO
.Xr hccontrol 8 ,
.Xr hcsecd 8 ,
.Xr virtual_oss 1 ,
.Xr xdotool 1 ,
.Xr playerctl 1
.Sh AUTHORS
.An Nico Sonack aka. herrhotzenplotz Aq Mt nsonack@herrhotzenplotz.de
.Sh BUGS
The AVCTP protocol implementation is likely buggy and not strictly
compliant to the Bluetooth SIG spec. In case you hit any weirdnesses
or detect protocol errors please report them either via E-Mail to me or on
.Lk https://github.com/herrhotzenplotz/btavctpd "Microsoft© GitHub™" .
.Pp
You can use
.Xr hcidump 1
from the ports tree to record the transactions with the HCI and
analyse the traffic in Wireshark:
.Bd -literal -width indent
# rm -f bork.pcap
# hcidump -i ubt0hci -w bork.pcap
# chown user:user bork.pcap
$ wireshark bork.pcap
.Ed
.Pp
This is how I dissected the traffic for debugging purposes.
